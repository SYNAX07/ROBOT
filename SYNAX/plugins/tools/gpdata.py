from pyrogram import enums
from pyrogram.enums import ChatType
from pyrogram import filters, Client
from SYNAX import app
from config import OWNER_ID
from pyrogram.types import Message
from SYNAX.utils.SYNAX_ban import admin_filter
from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton



# ------------------------------------------------------------------------------- #


@app.on_message(filters.command("pin") & admin_filter)
async def pin(_, message):
    replied = message.reply_to_message
    chat_title = message.chat.title
    chat_id = message.chat.id
    user_id = message.from_user.id
    name = message.from_user.mention
    
    if message.chat.type == enums.ChatType.PRIVATE:
        await message.reply_text("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ ü è ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !**")
    elif not replied:
        await message.reply_text("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ò…™…¥ …™·¥õ !**")
    else:
        user_stats = await app.get_chat_member(chat_id, user_id)
        if user_stats.privileges.can_pin_messages and message.reply_to_message:
            try:
                await message.reply_to_message.pin()
                await message.reply_text(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á!**\n\n**·¥Ñ ú·¥Ä·¥õ:** {chat_title}\n**·¥Ä·¥Ö·¥ç…™…¥:** {name}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(" üìù ·¥†…™·¥á·¥°s ·¥ç·¥áss·¥Ä…¢·¥á ", url=replied.link)]]))
            except Exception as e:
                await message.reply_text(str(e))


@app.on_message(filters.command("pinned"))
async def pinned(_, message):
    chat = await app.get_chat(message.chat.id)
    if not chat.pinned_message:
        return await message.reply_text("**…¥·¥è ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è·¥ú…¥·¥Ö**")
    try:        
        await message.reply_text(" ú·¥á Ä·¥á …™s ·¥õ ú·¥á  ü·¥Ä·¥õ·¥ás·¥õ ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á",reply_markup=
        InlineKeyboardMarkup([[InlineKeyboardButton(text="üìù ·¥†…™·¥á·¥° ·¥ç·¥áss·¥Ä…¢·¥á",url=chat.pinned_message.link)]]))  
    except Exception as er:
        await message.reply_text(er)


# ------------------------------------------------------------------------------- #

@app.on_message(filters.command("unpin") & admin_filter)
async def unpin(_, message):
    replied = message.reply_to_message
    chat_title = message.chat.title
    chat_id = message.chat.id
    user_id = message.from_user.id
    name = message.from_user.mention
    
    if message.chat.type == enums.ChatType.PRIVATE:
        await message.reply_text("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ ü è ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !**")
    elif not replied:
        await message.reply_text("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ú…¥·¥ò…™…¥ …™·¥õ !**")
    else:
        user_stats = await app.get_chat_member(chat_id, user_id)
        if user_stats.privileges.can_pin_messages and message.reply_to_message:
            try:
                await message.reply_to_message.unpin()
                await message.reply_text(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ú…¥·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á!**\n\n**·¥Ñ ú·¥Ä·¥õ:** {chat_title}\n**·¥Ä·¥Ö·¥ç…™…¥:** {name}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(" üìù ·¥†…™·¥á·¥°s ·¥ç·¥áss·¥Ä…¢·¥á ", url=replied.link)]]))
            except Exception as e:
                await message.reply_text(str(e))




# --------------------------------------------------------------------------------- #

@app.on_message(filters.command("removephoto") & admin_filter)
async def deletechatphoto(_, message):
      
      chat_id = message.chat.id
      user_id = message.from_user.id
      msg = await message.reply_text("**·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢....**")
      admin_check = await app.get_chat_member(chat_id, user_id)
      if message.chat.type == enums.ChatType.PRIVATE:
           await msg.edit("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ã ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !**") 
      try:
         if admin_check.privileges.can_change_info:
             await app.delete_chat_photo(chat_id)
             await msg.edit("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥ò Ä·¥è“ì…™ ü·¥á ·¥ò ú·¥è·¥õ·¥è “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò !\n ô è** {}".format(message.from_user.mention))    
      except:
          await msg.edit("**·¥õ ú·¥á ·¥ús·¥á Ä ·¥ç·¥ès·¥õ …¥·¥á·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á …¢ Ä·¥è·¥ú·¥ò ·¥ò ú·¥è·¥õ·¥è !**")


# --------------------------------------------------------------------------------- #

@app.on_message(filters.command("setphoto")& admin_filter)
async def setchatphoto(_, message):
      reply = message.reply_to_message
      chat_id = message.chat.id
      user_id = message.from_user.id
      msg = await message.reply_text("·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...")
      admin_check = await app.get_chat_member(chat_id, user_id)
      if message.chat.type == enums.ChatType.PRIVATE:
           await msg.edit("`·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ã ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !`") 
      elif not reply:
           await msg.edit("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ò ú·¥è·¥õ·¥è ·¥è Ä ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ.**")
      elif reply:
          try:
             if admin_check.privileges.can_change_info:
                photo = await reply.download()
                await message.chat.set_photo(photo=photo)
                await msg.edit_text("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …¥·¥á·¥° ·¥ò Ä·¥è“ì…™ ü·¥á ·¥ò ú·¥è·¥õ·¥è …™…¥s·¥á Ä·¥õ !\n ô è** {}".format(message.from_user.mention))
             else:
                await msg.edit("**s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥° Ä·¥è…¥…¢  ú·¥Ä·¥ò·¥ò·¥á…¥·¥á·¥Ö ·¥õ Ä è ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ò ú·¥è·¥õ·¥è !**")
     
          except:
              await msg.edit("**·¥õ ú·¥á ·¥ús·¥á Ä ·¥ç·¥ès·¥õ …¥·¥á·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥ò ú·¥è·¥õ·¥è !**")


# --------------------------------------------------------------------------------- #

@app.on_message(filters.command("settitle")& admin_filter)
async def setgrouptitle(_, message):
    reply = message.reply_to_message
    chat_id = message.chat.id
    user_id = message.from_user.id
    msg = await message.reply_text("·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...")
    if message.chat.type == enums.ChatType.PRIVATE:
          await msg.edit("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ã ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !**")
    elif reply:
          try:
            title = message.reply_to_message.text
            admin_check = await app.get_chat_member(chat_id, user_id)
            if admin_check.privileges.can_change_info:
               await message.chat.set_title(title)
               await msg.edit("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á …™…¥s·¥á Ä·¥õ !\n ô è** {}".format(message.from_user.mention))
          except AttributeError:
                await msg.edit("**·¥õ ú·¥á ·¥ús·¥á Ä ·¥ç·¥ès·¥õ …¥·¥á·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥õ…™·¥õ ü·¥á !**")   
    elif len(message.command) >1:
        try:
            title = message.text.split(None, 1)[1]
            admin_check = await app.get_chat_member(chat_id, user_id)
            if admin_check.privileges.can_change_info:
               await message.chat.set_title(title)
               await msg.edit("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á …™…¥s·¥á Ä·¥õ !\n ô è** {}".format(message.from_user.mention))
        except AttributeError:
               await msg.edit("**·¥õ ú·¥á ·¥ús·¥á Ä ·¥ç·¥ès·¥õ …¥·¥á·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥õ…™·¥õ ü·¥á !**")
          

    else:
       await msg.edit("** è·¥è·¥ú …¥·¥á·¥á·¥Ö  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ·¥áx·¥õ ·¥è Ä …¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥õ…™·¥õ ü·¥á **")


# --------------------------------------------------------------------------------- #



@app.on_message(filters.command("setdiscription") & admin_filter)
async def setg_discription(_, message):
    reply = message.reply_to_message
    chat_id = message.chat.id
    user_id = message.from_user.id
    msg = await message.reply_text("**·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...**")
    if message.chat.type == enums.ChatType.PRIVATE:
        await msg.edit("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs!**")
    elif reply:
        try:
            discription = message.reply_to_message.text
            admin_check = await app.get_chat_member(chat_id, user_id)
            if admin_check.privileges.can_change_info:
                await message.chat.set_description(discription)
                await msg.edit("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥Ö…™s·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ …™…¥s·¥á Ä·¥õ!**\n ô è {}".format(message.from_user.mention))
        except AttributeError:
            await msg.edit("**·¥õ ú·¥á ·¥ús·¥á Ä ·¥ç·¥ús·¥õ  ú·¥Ä·¥†·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ö…™s·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥!**")   
    elif len(message.command) > 1:
        try:
            discription = message.text.split(None, 1)[1]
            admin_check = await app.get_chat_member(chat_id, user_id)
            if admin_check.privileges.can_change_info:
                await message.chat.set_description(discription)
                await msg.edit("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥Ö…™s·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ …™…¥s·¥á Ä·¥õ!**\n ô è {}".format(message.from_user.mention))
        except AttributeError:
            await msg.edit("**·¥õ ú·¥á ·¥ús·¥á Ä ·¥ç·¥ús·¥õ  ú·¥Ä·¥†·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ö…™s·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥!**")
    else:
        await msg.edit("** è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ·¥áx·¥õ ·¥è Ä …¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ö…™s·¥Ñ Ä…™·¥ò·¥õ·¥è…¥!**")


# --------------------------------------------------------------------------------- #

@app.on_message(filters.command("lg")& filters.user(OWNER_ID))
async def bot_leave(_, message):
    chat_id = message.chat.id
    text = "**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ú…™ Ä·¥è !!.**"
    await message.reply_text(text)
    await app.leave_chat(chat_id=chat_id, delete=True)


# --------------------------------------------------------------------------------- #


